{"ast":null,"code":"var _jsxFileName = \"C:\\\\developing\\\\spotify-like-web-main\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect } from \"react\";\nimport styles from \"./App.module.scss\";\nimport SideBar from \"./components/SideBar/SideBar\";\nimport Player from \"./components/Player/Player\";\nimport Playlists from \"./pages/Playlists/Playlists\";\nimport PlaylistDetail from \"./pages/PlaylistDetail/PlaylistDetail\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = ({\n  playlists,\n  initPlaylists\n}) => {\n  _s();\n\n  //  const [error, setError] = useState<null | string>();\n\n  /*    const loadPlaylists = useCallback(async () => {\n  \n          if (data?.playlists) {\n              initPlaylists(data?.playlists?.items);\n          }, [initPlaylists]);*/\n  let data = {\n    href: 'string',\n    items: [{\n      collaborative: false,\n      description: 'desc',\n      external_urls: {\n        spotify: 'ext_url'\n      },\n      href: 'href',\n      id: 'id',\n      images: [{\n        height: 512,\n        width: 512,\n        url: 'url'\n      }],\n      name: 'name',\n      owner: {\n        display_name: 'display_name',\n        external_urls: {\n          spotify: 'string'\n        },\n        href: 'string;',\n        id: 'string',\n        type: 'string',\n        uri: 'string'\n      },\n      primary_color: null,\n      public: null,\n      snapshot_id: 'string',\n      tracks: {\n        href: 'string',\n        total: 1,\n        items: [{\n          added_at: 'asd',\n          added_by: {\n            external_urls: {\n              spotify: 'string'\n            },\n            href: 'string',\n            id: 'string',\n            type: 'string',\n            uri: 'string'\n          },\n          is_local: false,\n          primary_color: null,\n          track: {\n            album: {\n              album_type: 'string',\n              artists: [{\n                external_urls: {\n                  spotify: 'string'\n                },\n                href: 'string',\n                id: 'string',\n                name: 'string',\n                type: 'string',\n                uri: 'string'\n              }],\n              available_markets: ['string'],\n              external_urls: {\n                spotify: 'string'\n              },\n              href: 'string',\n              id: 'string',\n              images: [{\n                height: 512,\n                width: 512,\n                url: 'string'\n              }],\n              name: 'string',\n              release_date: 'string',\n              release_date_precision: 'string',\n              total_tracks: 1,\n              type: 'string',\n              uri: 'string'\n            },\n            artists: [{\n              external_urls: {\n                spotify: 'string'\n              },\n              href: 'string',\n              id: 'string',\n              name: 'string',\n              type: 'string',\n              uri: 'string'\n            }],\n            available_markets: ['', ''],\n            disc_number: 1,\n            duration_ms: 240000,\n            episode: false,\n            explicit: true,\n            external_ids: {\n              isrc: 'string'\n            },\n            external_urls: {\n              spotify: 'string'\n            },\n            href: 'string',\n            id: 'string',\n            is_local: false,\n            name: 'string',\n            popularity: 100,\n            preview_url: 'string',\n            track: true,\n            track_number: 1,\n            type: 'string',\n            uri: 'string'\n          },\n          video_thumbnail: {\n            url: 'string'\n          }\n        }],\n        limit: 10,\n        next: 'string',\n        offset: 2,\n        previous: null\n      },\n      type: 'string',\n      uri: 'string'\n    }],\n    limit: 5,\n    next: null,\n    offset: 2,\n    previous: null,\n    total: 1\n  };\n\n  function GetPlaylists() {\n    return new Promise(() => {}).then(response => {\n      return data;\n    }).catch(e => {\n      console.log(e);\n    });\n  }\n\n  const loadPlaylists = useCallback(async () => {\n    await GetPlaylists().then(data => {\n      if (data) {\n        initPlaylists(data);\n      }\n    });\n  }, [initPlaylists]);\n  useEffect(() => {\n    loadPlaylists();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.App,\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: [playlists && /*#__PURE__*/_jsxDEV(SideBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        children: playlists && /*#__PURE__*/_jsxDEV(Playlists, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/playlist/:id\",\n        children: /*#__PURE__*/_jsxDEV(PlaylistDetail, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Player, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"L8ngb+HlPOzXGE7TL+iG1ioGEz4=\");\n\n_c = App;\n\nconst mapStateToProps = state => {\n  return {\n    playlists: state.playlists\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    initPlaylists: data => dispatch({\n      type: \"init\",\n      playlists: data\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/developing/spotify-like-web-main/src/App.tsx"],"names":["useCallback","useEffect","styles","SideBar","Player","Playlists","PlaylistDetail","connect","BrowserRouter","Router","Route","App","playlists","initPlaylists","data","href","items","collaborative","description","external_urls","spotify","id","images","height","width","url","name","owner","display_name","type","uri","primary_color","public","snapshot_id","tracks","total","added_at","added_by","is_local","track","album","album_type","artists","available_markets","release_date","release_date_precision","total_tracks","disc_number","duration_ms","episode","explicit","external_ids","isrc","popularity","preview_url","track_number","video_thumbnail","limit","next","offset","previous","GetPlaylists","Promise","then","response","catch","e","console","log","loadPlaylists","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import {useCallback, useEffect} from \"react\";\nimport styles from \"./App.module.scss\";\n\nimport SideBar from \"./components/SideBar/SideBar\";\nimport Player from \"./components/Player/Player\";\n\nimport Playlists from \"./pages/Playlists/Playlists\";\nimport PlaylistDetail from \"./pages/PlaylistDetail/PlaylistDetail\";\n\nimport { connect } from \"react-redux\";\n\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport { Playlists as PlaylistsType } from \"./types/Playlists\";\n//import {Track} from \"./types/Track\";\n//import {Playlist} from \"./types/Playlist\";\n\ntype AppProps = {\n  playlists: PlaylistsType;\n  initPlaylists: (data: PlaylistsType) => void;\n};\n\nconst App = ({ playlists, initPlaylists }: AppProps) => {\n//  const [error, setError] = useState<null | string>();\n/*    const loadPlaylists = useCallback(async () => {\n\n        if (data?.playlists) {\n            initPlaylists(data?.playlists?.items);\n        }, [initPlaylists]);*/\n\n    let data: PlaylistsType = {\n        href: 'string',\n        items: [\n            {\n                collaborative: false,\n                description: 'desc',\n                external_urls: {spotify: 'ext_url'},\n                href: 'href',\n                id: 'id',\n                images: [\n                    {\n                        height: 512,\n                        width: 512,\n                        url: 'url',\n                    }\n                ],\n                name: 'name',\n                owner: {\n                    display_name: 'display_name',\n                    external_urls: {spotify: 'string'},\n                    href: 'string;',\n                    id: 'string',\n                    type: 'string',\n                    uri: 'string'\n                },\n                primary_color: null,\n                public: null,\n                snapshot_id: 'string',\n                tracks: {\n                    href: 'string',\n                    total: 1,\n                    items: [\n                        {\n                            added_at: 'asd',\n                            added_by: {\n                                external_urls: {spotify: 'string'},\n                                href: 'string',\n                                id: 'string',\n                                type: 'string',\n                                uri: 'string',\n                            },\n                            is_local: false,\n                            primary_color: null,\n                            track: {\n                                album: {\n                                    album_type: 'string',\n                                    artists: [\n                                        {\n                                            external_urls: {spotify: 'string'},\n                                            href: 'string',\n                                            id: 'string',\n                                            name: 'string',\n                                            type: 'string',\n                                            uri: 'string',\n                                        }\n                                    ],\n                                    available_markets: ['string'],\n                                    external_urls: {spotify: 'string'},\n                                    href: 'string',\n                                    id: 'string',\n                                    images: [\n                                        {\n                                            height: 512,\n                                            width: 512,\n                                            url: 'string',\n                                        }\n                                    ],\n                                    name: 'string',\n                                    release_date: 'string',\n                                    release_date_precision: 'string',\n                                    total_tracks: 1,\n                                    type: 'string',\n                                    uri: 'string',\n                                },\n                                artists: [\n                                    {\n                                        external_urls: {spotify: 'string'},\n                                        href: 'string',\n                                        id: 'string',\n                                        name: 'string',\n                                        type: 'string',\n                                        uri: 'string',\n                                    }\n                                ],\n                                available_markets: ['', ''],\n                                disc_number: 1,\n                                duration_ms: 240000,\n                                episode: false,\n                                explicit: true,\n                                external_ids: {isrc: 'string'},\n                                external_urls: {spotify: 'string'},\n                                href: 'string',\n                                id: 'string',\n                                is_local: false,\n                                name: 'string',\n                                popularity: 100,\n                                preview_url: 'string',\n                                track: true,\n                                track_number: 1,\n                                type: 'string',\n                                uri: 'string',\n                            },\n                            video_thumbnail: {url: 'string'},\n                        }\n                    ],\n                    limit: 10,\n                    next: 'string',\n                    offset: 2,\n                    previous: null,\n                },\n                type: 'string',\n                uri: 'string',\n            }\n        ],\n        limit: 5,\n        next: null,\n        offset: 2,\n        previous: null,\n        total: 1,\n    }\n\n    function GetPlaylists() {\n            return new Promise(() => {\n            })\n            .then((response) => {\n                return data;\n            })\n            .catch((e) => {\n                console.log(e);\n            });\n    }\n\n    const loadPlaylists = useCallback(async () => {\n        await GetPlaylists().then((data) => {\n            if (data) {\n                initPlaylists(data);\n            }\n        });\n    }, [initPlaylists]);\n\n    useEffect(() => {\n        loadPlaylists();\n    }, []);\n\n    return (\n        <div className={styles.App}>\n          <Router>\n            {playlists && <SideBar/>}\n\n            <Route path=\"/\" exact>\n              {playlists && <Playlists/>}\n            </Route>\n\n            <Route path=\"/playlist/:id\">\n              <PlaylistDetail/>\n            </Route>\n\n            <Player/>\n          </Router>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state: { playlists: PlaylistsType }) => {\n  return {\n    playlists: state.playlists,\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: (initPlaylists: { type: string; playlists: PlaylistsType }) => void\n) => {\n  return {\n    initPlaylists: (data: PlaylistsType) =>\n      dispatch({ type: \"init\", playlists: data }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}