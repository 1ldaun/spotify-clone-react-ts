{"ast":null,"code":"var _jsxFileName = \"C:\\\\developing\\\\spotify-like-web-main\\\\src\\\\pages\\\\PlaylistDetail\\\\PlaylistDetail.tsx\",\n    _s = $RefreshSig$();\n\nimport FastAverageColor from \"fast-average-color\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport styles from \"./PlaylistDetail.module.scss\";\nimport { SongItem } from \"./SongItem/SongItem\";\nimport { Time } from \"../../assets/Time\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PlaylistDetail = ({\n  loadSong,\n  currentSong\n}) => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [playlist, setPlaylist] = useState();\n  const coverRef = useRef(null);\n  let data;\n  setPlaylist(data);\n  useEffect(() => {\n    loadPlaylistDetails(id);\n  }, [id]);\n  useEffect(() => {\n    if (coverRef.current) {\n      coverRef.current.crossOrigin = \"Anonymous\";\n      const fac = new FastAverageColor();\n      fac.getColorAsync(coverRef.current).then(color => {\n        document.getElementById(\"Background\").style.backgroundColor = color.rgb;\n        document.getElementById(\"PlaylistBackgorund\").style.backgroundColor = color.rgb;\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  }, [playlist]);\n\n  const loadPlaylistDetails = async playlistId => {\n    /*   await GetPlaylistDetail(playlistId).then((data) => {\n         setPlaylist(data);\n       });*/\n  };\n\n  const songClicked = song => {\n    if (song.track.preview_url) {\n      loadSong(song);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: playlist && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.PlaylistDetail,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.Cover,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.Background,\n          id: \"Background\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.Gradient\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.Img,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: playlist.images[0].url,\n            alt: \"playlist img\",\n            ref: coverRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.Infos,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.Playlist,\n            children: \"PLAYLIST\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.Title,\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: playlist.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.Categ,\n            children: playlist.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.Details,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.Text_Bold,\n              children: playlist.owner.display_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.Text_Light,\n              children: [playlist.tracks.items.length, \" songs, about 4 hr 20 min\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.List_Background,\n        id: \"PlaylistBackgorund\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.List,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.Heading_Sticky,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.Heading,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Album\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Date added\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.Length,\n              children: /*#__PURE__*/_jsxDEV(Time, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), playlist.tracks.items.map((item, index) => /*#__PURE__*/_jsxDEV(SongItem, {\n          song: item,\n          index: index,\n          current: item.track.id === (currentSong === null || currentSong === void 0 ? void 0 : currentSong.track.id) ? true : false,\n          songClicked: () => songClicked(item)\n        }, item.track.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(PlaylistDetail, \"bBtuRGnWvNcUpfkuHcdt/fm8W6w=\", false, function () {\n  return [useParams];\n});\n\n_c = PlaylistDetail;\n\nconst mapStateToProps = state => {\n  return {\n    currentSong: state.playing.song\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    loadSong: song => dispatch({\n      type: \"load\",\n      song\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaylistDetail);\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaylistDetail\");","map":{"version":3,"sources":["C:/developing/spotify-like-web-main/src/pages/PlaylistDetail/PlaylistDetail.tsx"],"names":["FastAverageColor","useEffect","useRef","useState","connect","useParams","styles","SongItem","Time","PlaylistDetail","loadSong","currentSong","id","playlist","setPlaylist","coverRef","data","loadPlaylistDetails","current","crossOrigin","fac","getColorAsync","then","color","document","getElementById","style","backgroundColor","rgb","catch","err","console","log","playlistId","songClicked","song","track","preview_url","Cover","Background","Gradient","Img","images","url","Infos","Playlist","Title","name","Categ","description","Details","Text_Bold","owner","display_name","Text_Light","tracks","items","length","List_Background","List","Heading_Sticky","Heading","Length","map","item","index","mapStateToProps","state","playing","mapDispatchToProps","dispatch","type"],"mappings":"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","sourcesContent":["import FastAverageColor from \"fast-average-color\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport styles from \"./PlaylistDetail.module.scss\";\nimport { SongItem } from \"./SongItem/SongItem\";\nimport { Time } from \"../../assets/Time\";\nimport { Track } from \"../../types/Track\";\nimport { Playlist } from \"../../types/Playlist\";\n\ntype PlaylistDetailProps = {\n  loadSong: (song: Track) => void;\n  currentSong: Track;\n};\n\nconst PlaylistDetail = ({ loadSong, currentSong }: PlaylistDetailProps) => {\n  const { id } = useParams<{ id: string }>();\n  const [playlist, setPlaylist] = useState<Playlist | null>();\n  const coverRef = useRef<HTMLImageElement | null>(null);\n  let data;\n  setPlaylist(data);\n  useEffect(() => {\n    loadPlaylistDetails(id);\n  }, [id]);\n\n  useEffect(() => {\n    if (coverRef.current) {\n      coverRef.current.crossOrigin = \"Anonymous\";\n      const fac = new FastAverageColor();\n      fac\n        .getColorAsync(coverRef.current)\n        .then((color) => {\n          document.getElementById(\"Background\")!.style.backgroundColor =\n            color.rgb;\n          document.getElementById(\"PlaylistBackgorund\")!.style.backgroundColor =\n            color.rgb;\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  }, [playlist]);\n\n  const loadPlaylistDetails = async (playlistId: string) => {\n /*   await GetPlaylistDetail(playlistId).then((data) => {\n      setPlaylist(data);\n    });*/\n  };\n\n  const songClicked = (song: Track) => {\n    if (song.track.preview_url) {\n      loadSong(song);\n    }\n  };\n\n  return (\n    <>\n      {playlist && (\n        <div className={styles.PlaylistDetail}>\n          <div className={styles.Cover}>\n            <div className={styles.Background} id=\"Background\"></div>\n            <div className={styles.Gradient}></div>\n            <div className={styles.Img}>\n              <img\n                src={playlist.images[0].url}\n                alt=\"playlist img\"\n                ref={coverRef}\n              />\n            </div>\n            <div className={styles.Infos}>\n              <div className={styles.Playlist}>PLAYLIST</div>\n              <div className={styles.Title}>\n                <h1>{playlist.name}</h1>\n              </div>\n              <div className={styles.Categ}>{playlist.description}</div>\n              <div className={styles.Details}>\n                <span className={styles.Text_Bold}>\n                  {playlist.owner.display_name}\n                </span>\n                <span className={styles.Text_Light}>\n                  {playlist.tracks.items.length} songs, about 4 hr 20 min\n                </span>\n              </div>\n            </div>\n          </div>\n\n          <div className={styles.List_Background} id=\"PlaylistBackgorund\" />\n          <div className={styles.List}>\n            <div className={styles.Heading_Sticky}>\n              <div className={styles.Heading}>\n                <div>#</div>\n                <div>Title</div>\n                <div>Album</div>\n                <div>Date added</div>\n                <div className={styles.Length}>\n                  <Time />\n                </div>\n              </div>\n            </div>\n\n            {playlist.tracks.items.map((item: Track, index: number) => (\n              <SongItem\n                key={item.track.id}\n                song={item}\n                index={index}\n                current={item.track.id === currentSong?.track.id ? true : false}\n                songClicked={() => songClicked(item)}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: { playing: { song: Track } }) => {\n  return {\n    currentSong: state.playing.song,\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: (loadSong: { type: string; song: Track }) => void\n) => {\n  return {\n    loadSong: (song: Track) => dispatch({ type: \"load\", song }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaylistDetail);\n"]},"metadata":{},"sourceType":"module"}