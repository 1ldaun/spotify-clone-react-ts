{"ast":null,"code":"var _jsxFileName = \"C:\\\\developing\\\\spotify-like-web-main\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport styles from \"./App.module.scss\";\nimport SideBar from \"./components/SideBar/SideBar\";\nimport Player from \"./components/Player/Player\";\nimport Playlists from \"./pages/Playlists/Playlists\";\nimport PlaylistDetail from \"./pages/PlaylistDetail/PlaylistDetail\";\nimport { GetPlaylists } from \"./API\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = ({\n  playlists,\n  initPlaylists\n}) => {\n  _s();\n\n  const [error, setError] = useState();\n  const loadPlaylists = useCallback(async () => {\n    await GetPlaylists().then(data => {\n      if (data === null || data === void 0 ? void 0 : data.playlists) {\n        var _data$playlists;\n\n        initPlaylists(data === null || data === void 0 ? void 0 : (_data$playlists = data.playlists) === null || _data$playlists === void 0 ? void 0 : _data$playlists.items);\n      } else {\n        setError(\"Could not load data\");\n      }\n    });\n  }, [initPlaylists]);\n  useEffect(() => {\n    loadPlaylists();\n  }, [loadPlaylists]);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.Error,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.App,\n      children: /*#__PURE__*/_jsxDEV(Router, {\n        children: [playlists && /*#__PURE__*/_jsxDEV(SideBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          exact: true,\n          children: playlists && /*#__PURE__*/_jsxDEV(Playlists, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 27\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/playlist/:id\",\n          children: /*#__PURE__*/_jsxDEV(PlaylistDetail, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Player, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(App, \"6xFmbwvNQXqpEY8S6tFaR8J6ZUk=\");\n\n_c = App;\n\nconst mapStateToProps = state => {\n  return {\n    playlists: state.playlists\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    initPlaylists: data => dispatch({\n      type: \"init\",\n      playlists: data\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/developing/spotify-like-web-main/src/App.tsx"],"names":["useCallback","useEffect","useState","styles","SideBar","Player","Playlists","PlaylistDetail","GetPlaylists","connect","BrowserRouter","Router","Route","App","playlists","initPlaylists","error","setError","loadPlaylists","then","data","items","Error","mapStateToProps","state","mapDispatchToProps","dispatch","type"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AAEA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,cAAP,MAA2B,uCAA3B;AAEA,SAASC,YAAT,QAA6B,OAA7B;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,QAA+C,kBAA/C;;;AASA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA4C;AAAA;;AACtD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,EAAlC;AACA,QAAMgB,aAAa,GAAGlB,WAAW,CAAC,YAAY;AAC5C,UAAMQ,YAAY,GAAGW,IAAf,CAAqBC,IAAD,IAAU;AAClC,UAAIA,IAAJ,aAAIA,IAAJ,uBAAIA,IAAI,CAAEN,SAAV,EAAqB;AAAA;;AACnBC,QAAAA,aAAa,CAACK,IAAD,aAACA,IAAD,0CAACA,IAAI,CAAEN,SAAP,oDAAC,gBAAiBO,KAAlB,CAAb;AACD,OAFD,MAEO;AACLJ,QAAAA,QAAQ,CAAC,qBAAD,CAAR;AACD;AACF,KANK,CAAN;AAOD,GARgC,EAQ9B,CAACF,aAAD,CAR8B,CAAjC;AAUAd,EAAAA,SAAS,CAAC,MAAM;AACdiB,IAAAA,aAAa;AACd,GAFQ,EAEN,CAACA,aAAD,CAFM,CAAT;;AAKA,MAAIF,KAAJ,EAAW;AACT,wBAAO;AAAK,MAAA,SAAS,EAAEb,MAAM,CAACmB,KAAvB;AAAA,gBAA+BN;AAA/B;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO;AACL,wBACE;AAAK,MAAA,SAAS,EAAEb,MAAM,CAACU,GAAvB;AAAA,6BACE,QAAC,MAAD;AAAA,mBACGC,SAAS,iBAAI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBADhB,eAGE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,GAAZ;AAAgB,UAAA,KAAK,MAArB;AAAA,oBACGA,SAAS,iBAAI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AADhB;AAAA;AAAA;AAAA;AAAA,gBAHF,eAOE,QAAC,KAAD;AAAO,UAAA,IAAI,EAAC,eAAZ;AAAA,iCACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAPF,eAWE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAiBD;AACF,CAtCD;;GAAMD,G;;KAAAA,G;;AAwCN,MAAMU,eAAe,GAAIC,KAAD,IAAyC;AAC/D,SAAO;AACLV,IAAAA,SAAS,EAAEU,KAAK,CAACV;AADZ,GAAP;AAGD,CAJD;;AAMA,MAAMW,kBAAkB,GACtBC,QADyB,IAEtB;AACH,SAAO;AACLX,IAAAA,aAAa,EAAGK,IAAD,IACbM,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,MAAR;AAAgBb,MAAAA,SAAS,EAAEM;AAA3B,KAAD;AAFL,GAAP;AAID,CAPD;;AASA,eAAeX,OAAO,CAACc,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CZ,GAA7C,CAAf","sourcesContent":["import { useCallback, useEffect, useState } from \"react\";\nimport styles from \"./App.module.scss\";\n\nimport SideBar from \"./components/SideBar/SideBar\";\nimport Player from \"./components/Player/Player\";\n\nimport Playlists from \"./pages/Playlists/Playlists\";\nimport PlaylistDetail from \"./pages/PlaylistDetail/PlaylistDetail\";\n\nimport { GetPlaylists } from \"./API\";\nimport { connect } from \"react-redux\";\n\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport { Playlists as PlaylistsType } from \"./types/Playlists\";\n\ntype AppProps = {\n  playlists: PlaylistsType;\n  initPlaylists: (data: PlaylistsType) => void;\n};\n\nconst App = ({ playlists, initPlaylists }: AppProps) => {\n  const [error, setError] = useState<null | string>();\n  const loadPlaylists = useCallback(async () => {\n    await GetPlaylists().then((data) => {\n      if (data?.playlists) {\n        initPlaylists(data?.playlists?.items);\n      } else {\n        setError(\"Could not load data\");\n      }\n    });\n  }, [initPlaylists]);\n\n  useEffect(() => {\n    loadPlaylists();\n  }, [loadPlaylists]);\n\n\n  if (error) {\n    return <div className={styles.Error}>{error}</div>;\n  } else {\n    return (\n      <div className={styles.App}>\n        <Router>\n          {playlists && <SideBar />}\n\n          <Route path=\"/\" exact>\n            {playlists && <Playlists />}\n          </Route>\n\n          <Route path=\"/playlist/:id\">\n            <PlaylistDetail />\n          </Route>\n\n          <Player />\n        </Router>\n      </div>\n    );\n  }\n};\n\nconst mapStateToProps = (state: { playlists: PlaylistsType }) => {\n  return {\n    playlists: state.playlists,\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: (initPlaylists: { type: string; playlists: PlaylistsType }) => void\n) => {\n  return {\n    initPlaylists: (data: PlaylistsType) =>\n      dispatch({ type: \"init\", playlists: data }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}