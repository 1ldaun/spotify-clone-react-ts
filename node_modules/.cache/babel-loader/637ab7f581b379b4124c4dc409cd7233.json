{"ast":null,"code":"var _jsxFileName = \"C:\\\\developing\\\\spotify-like-web-main\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\n//import { useCallback, useEffect} from \"react\";\nimport styles from \"./App.module.scss\";\nimport SideBar from \"./components/SideBar/SideBar\";\nimport Player from \"./components/Player/Player\";\nimport Playlists from \"./pages/Playlists/Playlists\";\nimport PlaylistDetail from \"./pages/PlaylistDetail/PlaylistDetail\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = ({\n  playlists,\n  initPlaylists\n}) => {\n  _s();\n\n  //  const [error, setError] = useState<null | string>();\n  const loadPlaylists = useCallback(async () => {\n    await GetPlaylists().then(data => {\n      if (data === null || data === void 0 ? void 0 : data.playlists) {\n        var _data$playlists;\n\n        initPlaylists(data === null || data === void 0 ? void 0 : (_data$playlists = data.playlists) === null || _data$playlists === void 0 ? void 0 : _data$playlists.items);\n      } else {\n        setError(\"Could not load data\");\n      }\n    });\n  }, [initPlaylists]);\n  useEffect(() => {\n    loadPlaylists();\n  }, [loadPlaylists]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.App,\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: [playlists && /*#__PURE__*/_jsxDEV(SideBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        exact: true,\n        children: playlists && /*#__PURE__*/_jsxDEV(Playlists, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/playlist/:id\",\n        children: /*#__PURE__*/_jsxDEV(PlaylistDetail, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Player, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"L8ngb+HlPOzXGE7TL+iG1ioGEz4=\");\n\n_c = App;\n\nconst mapStateToProps = state => {\n  return {\n    playlists: state.playlists\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    initPlaylists: data => dispatch({\n      type: \"init\",\n      playlists: data\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/developing/spotify-like-web-main/src/App.tsx"],"names":["styles","SideBar","Player","Playlists","PlaylistDetail","connect","BrowserRouter","Router","Route","App","playlists","initPlaylists","loadPlaylists","useCallback","GetPlaylists","then","data","items","setError","useEffect","mapStateToProps","state","mapDispatchToProps","dispatch","type"],"mappings":";;;AAAA;AACA,OAAOA,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AAEA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,cAAP,MAA2B,uCAA3B;AAEA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,QAA+C,kBAA/C;;;AASA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA4C;AAAA;;AACxD;AACI,QAAMC,aAAa,GAAGC,WAAW,CAAC,YAAY;AACxC,UAAMC,YAAY,GAAGC,IAAf,CAAqBC,IAAD,IAAU;AAClC,UAAIA,IAAJ,aAAIA,IAAJ,uBAAIA,IAAI,CAAEN,SAAV,EAAqB;AAAA;;AACnBC,QAAAA,aAAa,CAACK,IAAD,aAACA,IAAD,0CAACA,IAAI,CAAEN,SAAP,oDAAC,gBAAiBO,KAAlB,CAAb;AACD,OAFD,MAEO;AACLC,QAAAA,QAAQ,CAAC,qBAAD,CAAR;AACD;AACF,KANK,CAAN;AAOD,GAR4B,EAQ1B,CAACP,aAAD,CAR0B,CAAjC;AAUAQ,EAAAA,SAAS,CAAC,MAAM;AACdP,IAAAA,aAAa;AACd,GAFQ,EAEN,CAACA,aAAD,CAFM,CAAT;AAKA,sBACI;AAAK,IAAA,SAAS,EAAEZ,MAAM,CAACS,GAAvB;AAAA,2BACE,QAAC,MAAD;AAAA,iBACGC,SAAS,iBAAI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cADhB,eAGE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,GAAZ;AAAgB,QAAA,KAAK,MAArB;AAAA,kBACGA,SAAS,iBAAI,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AADhB;AAAA;AAAA;AAAA;AAAA,cAHF,eAOE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,eAAZ;AAAA,+BACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAPF,eAWE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CAlCD;;GAAMD,G;;KAAAA,G;;AAoCN,MAAMW,eAAe,GAAIC,KAAD,IAAyC;AAC/D,SAAO;AACLX,IAAAA,SAAS,EAAEW,KAAK,CAACX;AADZ,GAAP;AAGD,CAJD;;AAMA,MAAMY,kBAAkB,GACtBC,QADyB,IAEtB;AACH,SAAO;AACLZ,IAAAA,aAAa,EAAGK,IAAD,IACbO,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,MAAR;AAAgBd,MAAAA,SAAS,EAAEM;AAA3B,KAAD;AAFL,GAAP;AAID,CAPD;;AASA,eAAeX,OAAO,CAACe,eAAD,EAAkBE,kBAAlB,CAAP,CAA6Cb,GAA7C,CAAf","sourcesContent":["//import { useCallback, useEffect} from \"react\";\nimport styles from \"./App.module.scss\";\n\nimport SideBar from \"./components/SideBar/SideBar\";\nimport Player from \"./components/Player/Player\";\n\nimport Playlists from \"./pages/Playlists/Playlists\";\nimport PlaylistDetail from \"./pages/PlaylistDetail/PlaylistDetail\";\n\nimport { connect } from \"react-redux\";\n\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport { Playlists as PlaylistsType } from \"./types/Playlists\";\n\ntype AppProps = {\n  playlists: PlaylistsType;\n  initPlaylists: (data: PlaylistsType) => void;\n};\n\nconst App = ({ playlists, initPlaylists }: AppProps) => {\n//  const [error, setError] = useState<null | string>();\n    const loadPlaylists = useCallback(async () => {\n          await GetPlaylists().then((data) => {\n            if (data?.playlists) {\n              initPlaylists(data?.playlists?.items);\n            } else {\n              setError(\"Could not load data\");\n            }\n          });\n        }, [initPlaylists]);\n\n    useEffect(() => {\n      loadPlaylists();\n    }, [loadPlaylists]);\n\n\n    return (\n        <div className={styles.App}>\n          <Router>\n            {playlists && <SideBar/>}\n\n            <Route path=\"/\" exact>\n              {playlists && <Playlists/>}\n            </Route>\n\n            <Route path=\"/playlist/:id\">\n              <PlaylistDetail/>\n            </Route>\n\n            <Player/>\n          </Router>\n        </div>\n    );\n}\n\nconst mapStateToProps = (state: { playlists: PlaylistsType }) => {\n  return {\n    playlists: state.playlists,\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: (initPlaylists: { type: string; playlists: PlaylistsType }) => void\n) => {\n  return {\n    initPlaylists: (data: PlaylistsType) =>\n      dispatch({ type: \"init\", playlists: data }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}