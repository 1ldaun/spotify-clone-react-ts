{"ast":null,"code":"/*! Fast Average Color | Â© 2021 Denis Seleznev | MIT License | https://github.com/fast-average-color/fast-average-color */\nfunction toHex(num) {\n  const str = num.toString(16);\n  return str.length === 1 ? '0' + str : str;\n}\n\nfunction arrayToHex(arr) {\n  return '#' + arr.map(toHex).join('');\n}\n\nfunction isDark(color) {\n  // http://www.w3.org/TR/AERT#color-contrast\n  const result = (color[0] * 299 + color[1] * 587 + color[2] * 114) / 1000;\n  return result < 128;\n}\n\nfunction prepareIgnoredColor(color) {\n  if (!color) {\n    return color;\n  }\n\n  if (Array.isArray(color)) {\n    return typeof color[0] === 'number' ? [color.slice()] : color;\n  }\n\n  return [color];\n}\n\nfunction isIgnoredColor(data, index, ignoredColor) {\n  for (let i = 0; i < ignoredColor.length; i++) {\n    if (isIgnoredColorAsNumbers(data, index, ignoredColor[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction isIgnoredColorAsNumbers(data, index, ignoredColor) {\n  switch (ignoredColor.length) {\n    case 3:\n      // [red, green, blue]\n      if (isIgnoredRGBColor(data, index, ignoredColor)) {\n        return true;\n      }\n\n      break;\n\n    case 4:\n      // [red, green, blue, alpha]\n      if (isIgnoredRGBAColor(data, index, ignoredColor)) {\n        return true;\n      }\n\n      break;\n\n    case 5:\n      // [red, green, blue, alpha, threshold]\n      if (isIgnoredRGBAColorWithThreshold(data, index, ignoredColor)) {\n        return true;\n      }\n\n      break;\n\n    default:\n      return false;\n  }\n}\n\nfunction isIgnoredRGBColor(data, index, ignoredColor) {\n  // Ignore if the pixel are transparent.\n  if (data[index + 3] !== 255) {\n    return true;\n  }\n\n  if (data[index] === ignoredColor[0] && data[index + 1] === ignoredColor[1] && data[index + 2] === ignoredColor[2]) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isIgnoredRGBAColor(data, index, ignoredColor) {\n  if (data[index + 3] && ignoredColor[3]) {\n    return data[index] === ignoredColor[0] && data[index + 1] === ignoredColor[1] && data[index + 2] === ignoredColor[2] && data[index + 3] === ignoredColor[3];\n  } // Ignore rgb components if the pixel are fully transparent.\n\n\n  return data[index + 3] === ignoredColor[3];\n}\n\nfunction inRange(colorComponent, ignoredColorComponent, value) {\n  return colorComponent >= ignoredColorComponent - value && colorComponent <= ignoredColorComponent + value;\n}\n\nfunction isIgnoredRGBAColorWithThreshold(data, index, ignoredColor) {\n  const redIgnored = ignoredColor[0];\n  const greenIgnored = ignoredColor[1];\n  const blueIgnored = ignoredColor[2];\n  const alphaIgnored = ignoredColor[3];\n  const threshold = ignoredColor[4];\n  const alphaData = data[index + 3];\n  const alphaInRange = inRange(alphaData, alphaIgnored, threshold);\n\n  if (!alphaIgnored) {\n    return alphaInRange;\n  }\n\n  if (!alphaData && alphaInRange) {\n    return true;\n  }\n\n  if (inRange(data[index], redIgnored, threshold) && inRange(data[index + 1], greenIgnored, threshold) && inRange(data[index + 2], blueIgnored, threshold) && alphaInRange) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction dominantAlgorithm(arr, len, options) {\n  const colorHash = {};\n  const divider = 24;\n  const ignoredColor = options.ignoredColor;\n  const step = options.step;\n  let max = [0, 0, 0, 0, 0];\n\n  for (let i = 0; i < len; i += step) {\n    const red = arr[i];\n    const green = arr[i + 1];\n    const blue = arr[i + 2];\n    const alpha = arr[i + 3];\n\n    if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n      continue;\n    }\n\n    const key = Math.round(red / divider) + ',' + Math.round(green / divider) + ',' + Math.round(blue / divider);\n\n    if (colorHash[key]) {\n      colorHash[key] = [colorHash[key][0] + red * alpha, colorHash[key][1] + green * alpha, colorHash[key][2] + blue * alpha, colorHash[key][3] + alpha, colorHash[key][4] + 1];\n    } else {\n      colorHash[key] = [red * alpha, green * alpha, blue * alpha, alpha, 1];\n    }\n\n    if (max[4] < colorHash[key][4]) {\n      max = colorHash[key];\n    }\n  }\n\n  const redTotal = max[0];\n  const greenTotal = max[1];\n  const blueTotal = max[2];\n  const alphaTotal = max[3];\n  const count = max[4];\n  return alphaTotal ? [Math.round(redTotal / alphaTotal), Math.round(greenTotal / alphaTotal), Math.round(blueTotal / alphaTotal), Math.round(alphaTotal / count)] : options.defaultColor;\n}\n\nfunction simpleAlgorithm(arr, len, options) {\n  let redTotal = 0;\n  let greenTotal = 0;\n  let blueTotal = 0;\n  let alphaTotal = 0;\n  let count = 0;\n  const ignoredColor = options.ignoredColor;\n  const step = options.step;\n\n  for (let i = 0; i < len; i += step) {\n    const alpha = arr[i + 3];\n    const red = arr[i] * alpha;\n    const green = arr[i + 1] * alpha;\n    const blue = arr[i + 2] * alpha;\n\n    if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n      continue;\n    }\n\n    redTotal += red;\n    greenTotal += green;\n    blueTotal += blue;\n    alphaTotal += alpha;\n    count++;\n  }\n\n  return alphaTotal ? [Math.round(redTotal / alphaTotal), Math.round(greenTotal / alphaTotal), Math.round(blueTotal / alphaTotal), Math.round(alphaTotal / count)] : options.defaultColor;\n}\n\nfunction sqrtAlgorithm(arr, len, options) {\n  let redTotal = 0;\n  let greenTotal = 0;\n  let blueTotal = 0;\n  let alphaTotal = 0;\n  let count = 0;\n  const ignoredColor = options.ignoredColor;\n  const step = options.step;\n\n  for (let i = 0; i < len; i += step) {\n    const red = arr[i];\n    const green = arr[i + 1];\n    const blue = arr[i + 2];\n    const alpha = arr[i + 3];\n\n    if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n      continue;\n    }\n\n    redTotal += red * red * alpha;\n    greenTotal += green * green * alpha;\n    blueTotal += blue * blue * alpha;\n    alphaTotal += alpha;\n    count++;\n  }\n\n  return alphaTotal ? [Math.round(Math.sqrt(redTotal / alphaTotal)), Math.round(Math.sqrt(greenTotal / alphaTotal)), Math.round(Math.sqrt(blueTotal / alphaTotal)), Math.round(alphaTotal / count)] : options.defaultColor;\n}\n\nfunction getDefaultColor(options) {\n  return getOption(options, 'defaultColor', [0, 0, 0, 0]);\n}\n\nfunction getOption(options, name, defaultValue) {\n  return typeof options[name] === 'undefined' ? defaultValue : options[name];\n}\n\nconst MIN_SIZE = 10;\nconst MAX_SIZE = 100;\n\nfunction isSvg(filename) {\n  return filename.search(/\\.svg(\\?|$)/i) !== -1;\n}\n\nfunction getOriginalSize(resource) {\n  if (resource instanceof HTMLImageElement) {\n    let width = resource.naturalWidth;\n    let height = resource.naturalHeight; // For SVG images with only viewBox attr.\n\n    if (!resource.naturalWidth && isSvg(resource.src)) {\n      width = height = MAX_SIZE;\n    }\n\n    return {\n      width,\n      height\n    };\n  }\n\n  if (resource instanceof HTMLVideoElement) {\n    return {\n      width: resource.videoWidth,\n      height: resource.videoHeight\n    };\n  }\n\n  return {\n    width: resource.width,\n    height: resource.height\n  };\n}\n\nfunction prepareSizeAndPosition(originalSize, options) {\n  const srcLeft = getOption(options, 'left', 0);\n  const srcTop = getOption(options, 'top', 0);\n  const srcWidth = getOption(options, 'width', originalSize.width);\n  const srcHeight = getOption(options, 'height', originalSize.height);\n  let destWidth = srcWidth;\n  let destHeight = srcHeight;\n\n  if (options.mode === 'precision') {\n    return {\n      srcLeft,\n      srcTop,\n      srcWidth,\n      srcHeight,\n      destWidth,\n      destHeight\n    };\n  }\n\n  let factor;\n\n  if (srcWidth > srcHeight) {\n    factor = srcWidth / srcHeight;\n    destWidth = MAX_SIZE;\n    destHeight = Math.round(destWidth / factor);\n  } else {\n    factor = srcHeight / srcWidth;\n    destHeight = MAX_SIZE;\n    destWidth = Math.round(destHeight / factor);\n  }\n\n  if (destWidth > srcWidth || destHeight > srcHeight || destWidth < MIN_SIZE || destHeight < MIN_SIZE) {\n    destWidth = srcWidth;\n    destHeight = srcHeight;\n  }\n\n  return {\n    srcLeft,\n    srcTop,\n    srcWidth,\n    srcHeight,\n    destWidth,\n    destHeight\n  };\n}\n\nfunction makeCanvas() {\n  return typeof window === 'undefined' ? new OffscreenCanvas(1, 1) : document.createElement('canvas');\n}\n\nconst ERROR_PREFIX = 'FastAverageColor: ';\n\nfunction outputError(options, text, details) {\n  if (!options.silent) {\n    console.error(ERROR_PREFIX + text);\n\n    if (details) {\n      console.error(details);\n    }\n  }\n}\n\nfunction getError(text) {\n  return Error(ERROR_PREFIX + text);\n}\n\nclass FastAverageColor {\n  /**\n   * Get asynchronously the average color from not loaded image.\n   *\n   * @param {string | HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | null} resource\n   * @param {FastAverageColorOptions} [options]\n   *\n   * @returns {Promise<FastAverageColorOptions>}\n   */\n  getColorAsync(resource, options) {\n    if (!resource) {\n      return Promise.reject(getError('call .getColorAsync() without resource.'));\n    }\n\n    if (typeof resource === 'string') {\n      const img = new Image();\n      img.crossOrigin = '';\n      img.src = resource;\n      return this._bindImageEvents(img, options);\n    } else if (resource instanceof Image && !resource.complete) {\n      return this._bindImageEvents(resource, options);\n    } else {\n      const result = this.getColor(resource, options);\n      return result.error ? Promise.reject(result.error) : Promise.resolve(result);\n    }\n  }\n  /**\n   * Get the average color from images, videos and canvas.\n   *\n   * @param {HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | null} resource\n   * @param {FastAverageColorOptions} [options]\n   *\n   * @returns {FastAverageColorResult}\n   */\n\n\n  getColor(resource, options) {\n    options = options || {};\n    const defaultColor = getDefaultColor(options);\n\n    if (!resource) {\n      outputError(options, 'call .getColor(null) without resource.');\n      return this.prepareResult(defaultColor);\n    }\n\n    const originalSize = getOriginalSize(resource);\n    const size = prepareSizeAndPosition(originalSize, options);\n\n    if (!size.srcWidth || !size.srcHeight || !size.destWidth || !size.destHeight) {\n      outputError(options, `incorrect sizes for resource \"${resource.src}\".`);\n      return this.prepareResult(defaultColor);\n    }\n\n    if (!this._ctx) {\n      this._canvas = makeCanvas();\n      this._ctx = this._canvas.getContext && this._canvas.getContext('2d');\n\n      if (!this._ctx) {\n        outputError(options, 'Canvas Context 2D is not supported in this browser.');\n        return this.prepareResult(defaultColor);\n      }\n    }\n\n    this._canvas.width = size.destWidth;\n    this._canvas.height = size.destHeight;\n    let value = defaultColor;\n\n    try {\n      this._ctx.clearRect(0, 0, size.destWidth, size.destHeight);\n\n      this._ctx.drawImage(resource, size.srcLeft, size.srcTop, size.srcWidth, size.srcHeight, 0, 0, size.destWidth, size.destHeight);\n\n      const bitmapData = this._ctx.getImageData(0, 0, size.destWidth, size.destHeight).data;\n\n      value = this.getColorFromArray4(bitmapData, options);\n    } catch (e) {\n      outputError(options, `security error (CORS) for resource ${resource.src}.\\nDetails: https://developer.mozilla.org/en/docs/Web/HTML/CORS_enabled_image`, e);\n    }\n\n    return this.prepareResult(value);\n  }\n  /**\n   * Get the average color from a array when 1 pixel is 4 bytes.\n   *\n   * @param {number[]|Uint8Array|Uint8ClampedArray} arr\n   * @param {Object} [options]\n   * @param {string} [options.algorithm=\"sqrt\"] \"simple\", \"sqrt\" or \"dominant\"\n   * @param {number[]}  [options.defaultColor=[0, 0, 0, 0]] [red, green, blue, alpha]\n   * @param {number[]}  [options.ignoredColor] [red, green, blue, alpha]\n   * @param {number} [options.step=1]\n   *\n   * @returns {number[]} [red (0-255), green (0-255), blue (0-255), alpha (0-255)]\n   */\n\n\n  getColorFromArray4(arr, options) {\n    options = options || {};\n    const bytesPerPixel = 4;\n    const arrLength = arr.length;\n    const defaultColor = getDefaultColor(options);\n\n    if (arrLength < bytesPerPixel) {\n      return defaultColor;\n    }\n\n    const len = arrLength - arrLength % bytesPerPixel;\n    const step = (options.step || 1) * bytesPerPixel;\n    let algorithm;\n\n    switch (options.algorithm || 'sqrt') {\n      case 'simple':\n        algorithm = simpleAlgorithm;\n        break;\n\n      case 'sqrt':\n        algorithm = sqrtAlgorithm;\n        break;\n\n      case 'dominant':\n        algorithm = dominantAlgorithm;\n        break;\n\n      default:\n        throw getError(`${options.algorithm} is unknown algorithm.`);\n    }\n\n    return algorithm(arr, len, {\n      defaultColor,\n      ignoredColor: prepareIgnoredColor(options.ignoredColor),\n      step\n    });\n  }\n  /**\n   * Get color data from value ([r, g, b, a]).\n   *\n   * @param {number[]} value\n   *\n   * @returns {FastAverageColorResult}\n   */\n\n\n  prepareResult(value) {\n    const rgb = value.slice(0, 3);\n    const rgba = [].concat(rgb, value[3] / 255);\n    const isDarkColor = isDark(value);\n    return {\n      value,\n      rgb: 'rgb(' + rgb.join(',') + ')',\n      rgba: 'rgba(' + rgba.join(',') + ')',\n      hex: arrayToHex(rgb),\n      hexa: arrayToHex(value),\n      isDark: isDarkColor,\n      isLight: !isDarkColor\n    };\n  }\n  /**\n   * Destroy the instance.\n   */\n\n\n  destroy() {\n    delete this._canvas;\n    delete this._ctx;\n  }\n\n  _bindImageEvents(resource, options) {\n    return new Promise((resolve, reject) => {\n      const onload = () => {\n        unbindEvents();\n        const result = this.getColor(resource, options);\n\n        if (result.error) {\n          reject(result.error);\n        } else {\n          resolve(result);\n        }\n      };\n\n      const onerror = () => {\n        unbindEvents();\n        reject(getError(`Error loading image \"${resource.src}\".`));\n      };\n\n      const onabort = () => {\n        unbindEvents();\n        reject(getError(`Image \"${resource.src}\" loading aborted.`));\n      };\n\n      const unbindEvents = () => {\n        resource.removeEventListener('load', onload);\n        resource.removeEventListener('error', onerror);\n        resource.removeEventListener('abort', onabort);\n      };\n\n      resource.addEventListener('load', onload);\n      resource.addEventListener('error', onerror);\n      resource.addEventListener('abort', onabort);\n    });\n  }\n\n}\n/**\n * @typeof {Object} FastAverageColorOptions\n *\n * @param {number[]}  [options.defaultColor=[0, 0, 0, 0]] [red, green, blue, alpha]\n * @param {number[]}  [options.ignoredColor] [red, green, blue, alpha]\n * @param {string} [options.mode=\"speed\"] \"precision\" or \"speed\"\n * @param {string} [options.algorithm=\"sqrt\"] \"simple\", \"sqrt\" or \"dominant\"\n * @param {number} [options.step=1]\n * @param {number} [options.left=0]\n * @param {number} [options.top=0]\n * @param {number} [options.width=width of resource]\n * @param {number} [options.height=height of resource]\n * @param {boolean} [options.silent] Disable error output via console.error\n */\n\n/**\n * @typedef {Object} FastAverageColorResult\n *\n * @property {string} rgba\n * @property {string} rgb\n * @property {string} hex\n * @property {string} hexa\n * @property {number[]} value\n * @property {boolean} isDark\n * @property {boolean} isLight\n * @property {Error?} error\n */\n\n\nexport default FastAverageColor;","map":{"version":3,"sources":["C:/developing/spotify-like-web-main/node_modules/fast-average-color/dist/index.esm.js"],"names":["toHex","num","str","toString","length","arrayToHex","arr","map","join","isDark","color","result","prepareIgnoredColor","Array","isArray","slice","isIgnoredColor","data","index","ignoredColor","i","isIgnoredColorAsNumbers","isIgnoredRGBColor","isIgnoredRGBAColor","isIgnoredRGBAColorWithThreshold","inRange","colorComponent","ignoredColorComponent","value","redIgnored","greenIgnored","blueIgnored","alphaIgnored","threshold","alphaData","alphaInRange","dominantAlgorithm","len","options","colorHash","divider","step","max","red","green","blue","alpha","key","Math","round","redTotal","greenTotal","blueTotal","alphaTotal","count","defaultColor","simpleAlgorithm","sqrtAlgorithm","sqrt","getDefaultColor","getOption","name","defaultValue","MIN_SIZE","MAX_SIZE","isSvg","filename","search","getOriginalSize","resource","HTMLImageElement","width","naturalWidth","height","naturalHeight","src","HTMLVideoElement","videoWidth","videoHeight","prepareSizeAndPosition","originalSize","srcLeft","srcTop","srcWidth","srcHeight","destWidth","destHeight","mode","factor","makeCanvas","window","OffscreenCanvas","document","createElement","ERROR_PREFIX","outputError","text","details","silent","console","error","getError","Error","FastAverageColor","getColorAsync","Promise","reject","img","Image","crossOrigin","_bindImageEvents","complete","getColor","resolve","prepareResult","size","_ctx","_canvas","getContext","clearRect","drawImage","bitmapData","getImageData","getColorFromArray4","e","bytesPerPixel","arrLength","algorithm","rgb","rgba","concat","isDarkColor","hex","hexa","isLight","destroy","onload","unbindEvents","onerror","onabort","removeEventListener","addEventListener"],"mappings":"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","sourcesContent":["/*! Fast Average Color | Â© 2021 Denis Seleznev | MIT License | https://github.com/fast-average-color/fast-average-color */\nfunction toHex(num) {\n    const str = num.toString(16);\n\n    return str.length === 1 ? '0' + str : str;\n}\n\nfunction arrayToHex(arr) {\n    return '#' + arr.map(toHex).join('');\n}\n\nfunction isDark(color) {\n    // http://www.w3.org/TR/AERT#color-contrast\n    const result = (color[0] * 299 + color[1] * 587 + color[2] * 114) / 1000;\n\n    return result < 128;\n}\n\nfunction prepareIgnoredColor(color) {\n    if (!color) { return color; }\n\n    if (Array.isArray(color)) {\n        return typeof color[0] === 'number' ? [color.slice()] : color;\n    }\n\n    return [color];\n}\n\nfunction isIgnoredColor(data, index, ignoredColor) {\n    for (let i = 0; i < ignoredColor.length; i++) {\n        if (isIgnoredColorAsNumbers(data, index, ignoredColor[i])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction isIgnoredColorAsNumbers(data, index, ignoredColor) {\n    switch (ignoredColor.length) {\n        case 3:\n            // [red, green, blue]\n            if (isIgnoredRGBColor(data, index, ignoredColor)) {\n                return true;\n            }\n\n            break;\n        case 4:\n            // [red, green, blue, alpha]\n            if (isIgnoredRGBAColor(data, index, ignoredColor)) {\n                return true;\n            }\n\n            break;\n        case 5:\n            // [red, green, blue, alpha, threshold]\n            if (isIgnoredRGBAColorWithThreshold(data, index, ignoredColor)) {\n                return true;\n            }\n\n            break;\n        default:\n            return false;\n    }\n}\n\nfunction isIgnoredRGBColor(data, index, ignoredColor) {\n    // Ignore if the pixel are transparent.\n    if (data[index + 3] !== 255) {\n        return true;\n    }\n\n    if (data[index] === ignoredColor[0] &&\n        data[index + 1] === ignoredColor[1] &&\n        data[index + 2] === ignoredColor[2]\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction isIgnoredRGBAColor(data, index, ignoredColor) {\n    if (data[index + 3] && ignoredColor[3]) {\n        return data[index] === ignoredColor[0] &&\n            data[index + 1] === ignoredColor[1] &&\n            data[index + 2] === ignoredColor[2] &&\n            data[index + 3] === ignoredColor[3];\n    }\n\n    // Ignore rgb components if the pixel are fully transparent.\n    return data[index + 3] === ignoredColor[3];\n}\n\nfunction inRange(colorComponent, ignoredColorComponent, value) {\n    return colorComponent >= (ignoredColorComponent - value) &&\n        colorComponent <= (ignoredColorComponent + value);\n}\n\nfunction isIgnoredRGBAColorWithThreshold(data, index, ignoredColor) {\n    const redIgnored = ignoredColor[0];\n    const greenIgnored = ignoredColor[1];\n    const blueIgnored = ignoredColor[2];\n    const alphaIgnored = ignoredColor[3];\n    const threshold = ignoredColor[4];\n    const alphaData = data[index + 3];\n\n    const alphaInRange = inRange(alphaData, alphaIgnored, threshold);\n    if (!alphaIgnored) {\n        return alphaInRange;\n    }\n\n    if (!alphaData && alphaInRange) {\n        return true;\n    }\n\n    if (inRange(data[index], redIgnored, threshold) &&\n        inRange(data[index + 1], greenIgnored, threshold) &&\n        inRange(data[index + 2], blueIgnored, threshold) &&\n        alphaInRange\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction dominantAlgorithm(arr, len, options) {\n    const colorHash = {};\n    const divider = 24;\n    const ignoredColor = options.ignoredColor;\n    const step = options.step;\n    let max = [0, 0, 0, 0, 0];\n    \n    for (let i = 0; i < len; i += step) {\n        const red = arr[i];\n        const green = arr[i + 1];\n        const blue = arr[i + 2];\n        const alpha = arr[i + 3];\n\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n\n        const key = Math.round(red / divider) + ',' +\n                Math.round(green / divider) + ',' +\n                Math.round(blue / divider);\n\n        if (colorHash[key]) {\n            colorHash[key] = [\n                colorHash[key][0] + red * alpha,\n                colorHash[key][1] + green * alpha,\n                colorHash[key][2] + blue * alpha,\n                colorHash[key][3] + alpha,\n                colorHash[key][4] + 1\n            ];\n        } else {\n            colorHash[key] = [red * alpha, green * alpha, blue * alpha, alpha, 1];\n        }\n        \n        if (max[4] < colorHash[key][4]) {\n            max = colorHash[key];\n        }\n    }\n\n    const redTotal = max[0];\n    const greenTotal = max[1];\n    const blueTotal = max[2];\n\n    const alphaTotal = max[3];\n    const count = max[4];\n\n    return alphaTotal ? [\n        Math.round(redTotal / alphaTotal),\n        Math.round(greenTotal / alphaTotal),\n        Math.round(blueTotal / alphaTotal),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction simpleAlgorithm(arr, len, options) {\n    let redTotal = 0;\n    let greenTotal = 0;\n    let blueTotal = 0;\n    let alphaTotal = 0;\n    let count = 0;\n\n    const ignoredColor = options.ignoredColor;\n    const step = options.step;\n\n    for (let i = 0; i < len; i += step) {\n        const alpha = arr[i + 3];\n        const red = arr[i] * alpha;\n        const green = arr[i + 1] * alpha;\n        const blue = arr[i + 2] * alpha;\n\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n\n        redTotal += red;\n        greenTotal += green;\n        blueTotal += blue;\n        alphaTotal += alpha;\n\n        count++;\n    }\n\n    return alphaTotal ? [\n        Math.round(redTotal / alphaTotal),\n        Math.round(greenTotal / alphaTotal),\n        Math.round(blueTotal / alphaTotal),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction sqrtAlgorithm(arr, len, options) {\n    let redTotal = 0;\n    let greenTotal = 0;\n    let blueTotal = 0;\n    let alphaTotal = 0;\n    let count = 0;\n\n    const ignoredColor = options.ignoredColor;\n    const step = options.step;\n\n    for (let i = 0; i < len; i += step) {\n        const red = arr[i];\n        const green = arr[i + 1];\n        const blue = arr[i + 2];\n        const alpha = arr[i + 3];\n\n        if (ignoredColor && isIgnoredColor(arr, i, ignoredColor)) {\n            continue;\n        }\n\n        redTotal += red * red * alpha;\n        greenTotal += green * green * alpha;\n        blueTotal += blue * blue * alpha;\n        alphaTotal += alpha;\n\n        count++;\n    }\n\n    return alphaTotal ? [\n        Math.round(Math.sqrt(redTotal / alphaTotal)),\n        Math.round(Math.sqrt(greenTotal / alphaTotal)),\n        Math.round(Math.sqrt(blueTotal / alphaTotal)),\n        Math.round(alphaTotal / count)\n    ] : options.defaultColor;\n}\n\nfunction getDefaultColor(options) {\n    return getOption(options, 'defaultColor', [0, 0, 0, 0]);\n}\n\nfunction getOption(options, name, defaultValue) {\n    return typeof options[name] === 'undefined' ? defaultValue : options[name];\n}\n\nconst MIN_SIZE = 10;\nconst MAX_SIZE = 100;\n\nfunction isSvg(filename) {\n    return filename.search(/\\.svg(\\?|$)/i) !== -1;\n}\n\nfunction getOriginalSize(resource) {\n    if (resource instanceof HTMLImageElement) {\n        let width = resource.naturalWidth;\n        let height = resource.naturalHeight;\n\n        // For SVG images with only viewBox attr.\n        if (!resource.naturalWidth && isSvg(resource.src)) {\n            width = height = MAX_SIZE;\n        }\n\n        return {\n            width,\n            height,\n        };\n    }\n\n    if (resource instanceof HTMLVideoElement) {\n        return {\n            width: resource.videoWidth,\n            height: resource.videoHeight\n        };\n    }\n\n    return {\n        width: resource.width,\n        height: resource.height\n    };\n}\n\nfunction prepareSizeAndPosition(originalSize, options) {\n    const srcLeft = getOption(options, 'left', 0);\n    const srcTop = getOption(options, 'top', 0);\n    const srcWidth = getOption(options, 'width', originalSize.width);\n    const srcHeight = getOption(options, 'height', originalSize.height);\n\n    let destWidth = srcWidth;\n    let destHeight = srcHeight;\n\n    if (options.mode === 'precision') {\n        return {\n            srcLeft,\n            srcTop,\n            srcWidth,\n            srcHeight,\n            destWidth,\n            destHeight\n        };\n    }\n\n    let factor;\n\n    if (srcWidth > srcHeight) {\n        factor = srcWidth / srcHeight;\n        destWidth = MAX_SIZE;\n        destHeight = Math.round(destWidth / factor);\n    } else {\n        factor = srcHeight / srcWidth;\n        destHeight = MAX_SIZE;\n        destWidth = Math.round(destHeight / factor);\n    }\n\n    if (\n        destWidth > srcWidth || destHeight > srcHeight ||\n        destWidth < MIN_SIZE || destHeight < MIN_SIZE\n    ) {\n        destWidth = srcWidth;\n        destHeight = srcHeight;\n    }\n\n    return {\n        srcLeft,\n        srcTop,\n        srcWidth,\n        srcHeight,\n        destWidth,\n        destHeight\n    };\n}\n\nfunction makeCanvas() {\n    return typeof window === 'undefined' ?\n        new OffscreenCanvas(1, 1) :\n        document.createElement('canvas');\n}\n\nconst ERROR_PREFIX = 'FastAverageColor: ';\n\nfunction outputError(options, text, details) {\n    if (!options.silent) {\n        console.error(ERROR_PREFIX + text);\n\n        if (details) {\n            console.error(details);\n        }\n    }\n}\n\nfunction getError(text) {\n    return Error(ERROR_PREFIX + text);\n}\n\nclass FastAverageColor {\n    /**\n     * Get asynchronously the average color from not loaded image.\n     *\n     * @param {string | HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | null} resource\n     * @param {FastAverageColorOptions} [options]\n     *\n     * @returns {Promise<FastAverageColorOptions>}\n     */\n    getColorAsync(resource, options) {\n        if (!resource) {\n            return Promise.reject(getError('call .getColorAsync() without resource.'));\n        }\n\n        if (typeof resource === 'string') {\n            const img = new Image();\n            img.crossOrigin = '';\n            img.src = resource;\n\n            return this._bindImageEvents(img, options);\n        } else if (resource instanceof Image && !resource.complete) {\n            return this._bindImageEvents(resource, options);\n        } else {\n            const result = this.getColor(resource, options);\n\n            return result.error ? Promise.reject(result.error) : Promise.resolve(result);\n        }\n    }\n\n    /**\n     * Get the average color from images, videos and canvas.\n     *\n     * @param {HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | null} resource\n     * @param {FastAverageColorOptions} [options]\n     *\n     * @returns {FastAverageColorResult}\n     */\n    getColor(resource, options) {\n        options = options || {};\n\n        const defaultColor = getDefaultColor(options);\n\n        if (!resource) {\n            outputError(options, 'call .getColor(null) without resource.');\n\n            return this.prepareResult(defaultColor);\n        }\n\n        const originalSize = getOriginalSize(resource);\n        const size = prepareSizeAndPosition(originalSize, options);\n\n        if (!size.srcWidth || !size.srcHeight || !size.destWidth || !size.destHeight) {\n            outputError(options, `incorrect sizes for resource \"${resource.src}\".`);\n\n            return this.prepareResult(defaultColor);\n        }\n\n        if (!this._ctx) {\n            this._canvas = makeCanvas();\n            this._ctx = this._canvas.getContext && this._canvas.getContext('2d');\n\n            if (!this._ctx) {\n                outputError(options, 'Canvas Context 2D is not supported in this browser.');\n\n                return this.prepareResult(defaultColor);\n            }\n        }\n\n        this._canvas.width = size.destWidth;\n        this._canvas.height = size.destHeight;\n\n        let value = defaultColor;\n\n        try {\n            this._ctx.clearRect(0, 0, size.destWidth, size.destHeight);\n            this._ctx.drawImage(\n                resource,\n                size.srcLeft, size.srcTop,\n                size.srcWidth, size.srcHeight,\n                0, 0,\n                size.destWidth, size.destHeight\n            );\n\n            const bitmapData = this._ctx.getImageData(0, 0, size.destWidth, size.destHeight).data;\n            value = this.getColorFromArray4(bitmapData, options);\n        } catch (e) {\n            outputError(options, `security error (CORS) for resource ${resource.src}.\\nDetails: https://developer.mozilla.org/en/docs/Web/HTML/CORS_enabled_image`, e);\n        }\n\n        return this.prepareResult(value);\n    }\n\n    /**\n     * Get the average color from a array when 1 pixel is 4 bytes.\n     *\n     * @param {number[]|Uint8Array|Uint8ClampedArray} arr\n     * @param {Object} [options]\n     * @param {string} [options.algorithm=\"sqrt\"] \"simple\", \"sqrt\" or \"dominant\"\n     * @param {number[]}  [options.defaultColor=[0, 0, 0, 0]] [red, green, blue, alpha]\n     * @param {number[]}  [options.ignoredColor] [red, green, blue, alpha]\n     * @param {number} [options.step=1]\n     *\n     * @returns {number[]} [red (0-255), green (0-255), blue (0-255), alpha (0-255)]\n     */\n    getColorFromArray4(arr, options) {\n        options = options || {};\n\n        const bytesPerPixel = 4;\n        const arrLength = arr.length;\n        const defaultColor = getDefaultColor(options);\n\n        if (arrLength < bytesPerPixel) {\n            return defaultColor;\n        }\n\n        const len = arrLength - arrLength % bytesPerPixel;\n        const step = (options.step || 1) * bytesPerPixel;\n\n        let algorithm;\n\n        switch (options.algorithm || 'sqrt') {\n            case 'simple':\n                algorithm = simpleAlgorithm;\n                break;\n            case 'sqrt':\n                algorithm = sqrtAlgorithm;\n                break;\n            case 'dominant':\n                algorithm = dominantAlgorithm;\n                break;\n            default:\n                throw getError(`${options.algorithm} is unknown algorithm.`);\n        }\n\n        return algorithm(arr, len, {\n            defaultColor,\n            ignoredColor: prepareIgnoredColor(options.ignoredColor),\n            step\n        });\n    }\n\n    /**\n     * Get color data from value ([r, g, b, a]).\n     *\n     * @param {number[]} value\n     *\n     * @returns {FastAverageColorResult}\n     */\n    prepareResult(value) {\n        const rgb = value.slice(0, 3);\n        const rgba = [].concat(rgb, value[3] / 255);\n        const isDarkColor = isDark(value);\n\n        return {\n            value,\n            rgb: 'rgb(' + rgb.join(',') + ')',\n            rgba: 'rgba(' + rgba.join(',') + ')',\n            hex: arrayToHex(rgb),\n            hexa: arrayToHex(value),\n            isDark: isDarkColor,\n            isLight: !isDarkColor\n        };\n    }\n\n    /**\n     * Destroy the instance.\n     */\n    destroy() {\n        delete this._canvas;\n        delete this._ctx;\n    }\n\n    _bindImageEvents(resource, options) {\n        return new Promise((resolve, reject) => {\n            const onload = () => {\n                unbindEvents();\n\n                const result = this.getColor(resource, options);\n\n                if (result.error) {\n                    reject(result.error);\n                } else {\n                    resolve(result);\n                }\n            };\n\n            const onerror = () => {\n                unbindEvents();\n\n                reject(getError(`Error loading image \"${resource.src}\".`));\n            };\n\n            const onabort = () => {\n                unbindEvents();\n\n                reject(getError(`Image \"${resource.src}\" loading aborted.`));\n            };\n\n            const unbindEvents = () => {\n                resource.removeEventListener('load', onload);\n                resource.removeEventListener('error', onerror);\n                resource.removeEventListener('abort', onabort);\n            };\n\n            resource.addEventListener('load', onload);\n            resource.addEventListener('error', onerror);\n            resource.addEventListener('abort', onabort);\n        });\n    }\n}\n\n/**\n * @typeof {Object} FastAverageColorOptions\n *\n * @param {number[]}  [options.defaultColor=[0, 0, 0, 0]] [red, green, blue, alpha]\n * @param {number[]}  [options.ignoredColor] [red, green, blue, alpha]\n * @param {string} [options.mode=\"speed\"] \"precision\" or \"speed\"\n * @param {string} [options.algorithm=\"sqrt\"] \"simple\", \"sqrt\" or \"dominant\"\n * @param {number} [options.step=1]\n * @param {number} [options.left=0]\n * @param {number} [options.top=0]\n * @param {number} [options.width=width of resource]\n * @param {number} [options.height=height of resource]\n * @param {boolean} [options.silent] Disable error output via console.error\n */\n\n/**\n * @typedef {Object} FastAverageColorResult\n *\n * @property {string} rgba\n * @property {string} rgb\n * @property {string} hex\n * @property {string} hexa\n * @property {number[]} value\n * @property {boolean} isDark\n * @property {boolean} isLight\n * @property {Error?} error\n */\n\nexport default FastAverageColor;\n"]},"metadata":{},"sourceType":"module"}