{"ast":null,"code":"var _jsxFileName = \"C:\\\\developing\\\\spotify-like-web-main\\\\src\\\\pages\\\\PlaylistDetail\\\\PlaylistDetail.tsx\",\n    _s = $RefreshSig$();\n\nimport FastAverageColor from \"fast-average-color\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport styles from \"./PlaylistDetail.module.scss\";\nimport { SongItem } from \"./SongItem/SongItem\";\nimport { Time } from \"../../assets/Time\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PlaylistDetail = ({\n  loadSong,\n  currentSong\n}) => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [playlist, setPlaylist] = useState();\n  const coverRef = useRef(null);\n  useEffect(() => {\n    loadPlaylistDetails(id);\n  }, [id]);\n  useEffect(() => {\n    if (coverRef.current) {\n      coverRef.current.crossOrigin = \"Anonymous\";\n      const fac = new FastAverageColor();\n      fac.getColorAsync(coverRef.current).then(color => {\n        document.getElementById(\"Background\").style.backgroundColor = color.rgb;\n        document.getElementById(\"PlaylistBackgorund\").style.backgroundColor = color.rgb;\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  }, [playlist]);\n\n  const loadPlaylistDetails = playlistId => {\n    let data = {\n      collaborative: false,\n      description: 'desc',\n      external_urls: {\n        spotify: 'ext_url'\n      },\n      href: 'href',\n      id: 'id',\n      images: [{\n        height: 512,\n        width: 512,\n        url: 'url'\n      }],\n      name: 'name',\n      owner: {\n        display_name: 'display_name',\n        external_urls: {\n          spotify: 'string'\n        },\n        href: 'string;',\n        id: 'string',\n        type: 'string',\n        uri: 'string'\n      },\n      primary_color: null,\n      public: null,\n      snapshot_id: 'string',\n      tracks: {\n        href: 'string',\n        total: 1,\n        items: [{\n          added_at: 'asd',\n          added_by: {\n            external_urls: {\n              spotify: 'string'\n            },\n            href: 'string',\n            id: 'string',\n            type: 'string',\n            uri: 'string'\n          },\n          is_local: false,\n          primary_color: null,\n          track: {\n            album: {\n              album_type: 'string',\n              artists: [{\n                external_urls: {\n                  spotify: 'string'\n                },\n                href: 'string',\n                id: 'string',\n                name: 'string',\n                type: 'string',\n                uri: 'string'\n              }],\n              available_markets: ['string'],\n              external_urls: {\n                spotify: 'string'\n              },\n              href: 'string',\n              id: 'string',\n              images: [{\n                height: 512,\n                width: 512,\n                url: 'string'\n              }],\n              name: 'string',\n              release_date: 'string',\n              release_date_precision: 'string',\n              total_tracks: 1,\n              type: 'string',\n              uri: 'string'\n            },\n            artists: [{\n              external_urls: {\n                spotify: 'string'\n              },\n              href: 'string',\n              id: 'string',\n              name: 'string',\n              type: 'string',\n              uri: 'string'\n            }],\n            available_markets: ['', ''],\n            disc_number: 1,\n            duration_ms: 240000,\n            episode: false,\n            explicit: true,\n            external_ids: {\n              isrc: 'string'\n            },\n            external_urls: {\n              spotify: 'string'\n            },\n            href: 'string',\n            id: 'string',\n            is_local: false,\n            name: 'string',\n            popularity: 100,\n            preview_url: 'string',\n            track: true,\n            track_number: 1,\n            type: 'string',\n            uri: 'string'\n          },\n          video_thumbnail: {\n            url: 'string'\n          }\n        }],\n        limit: 10,\n        next: 'string',\n        offset: 2,\n        previous: null\n      },\n      type: 'string',\n      uri: 'string'\n    };\n    setPlaylist(data);\n  };\n\n  const songClicked = song => {\n    if (song.track.preview_url) {\n      loadSong(song);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: playlist && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.PlaylistDetail,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.Cover,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.Background,\n          id: \"Background\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.Gradient\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.Img,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: playlist.images[0].url,\n            alt: \"playlist img\",\n            ref: coverRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.Infos,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.Playlist,\n            children: \"PLAYLIST\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.Title,\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: playlist.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.Categ,\n            children: playlist.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.Details,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.Text_Bold,\n              children: playlist.owner.display_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: styles.Text_Light,\n              children: [playlist.tracks.items.length, \" songs, about 4 hr 20 min\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.List_Background,\n        id: \"PlaylistBackgorund\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.List,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.Heading_Sticky,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.Heading,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"#\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Album\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Date added\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.Length,\n              children: /*#__PURE__*/_jsxDEV(Time, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this), playlist.tracks.items.map((item, index) => /*#__PURE__*/_jsxDEV(SongItem, {\n          song: item,\n          index: index,\n          current: item.track.id === (currentSong === null || currentSong === void 0 ? void 0 : currentSong.track.id) ? true : false,\n          songClicked: () => songClicked(item)\n        }, item.track.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(PlaylistDetail, \"bBtuRGnWvNcUpfkuHcdt/fm8W6w=\", false, function () {\n  return [useParams];\n});\n\n_c = PlaylistDetail;\n\nconst mapStateToProps = state => {\n  return {\n    currentSong: state.playing.song\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    loadSong: song => dispatch({\n      type: \"load\",\n      song\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaylistDetail);\n\nvar _c;\n\n$RefreshReg$(_c, \"PlaylistDetail\");","map":{"version":3,"sources":["C:/developing/spotify-like-web-main/src/pages/PlaylistDetail/PlaylistDetail.tsx"],"names":["FastAverageColor","useEffect","useRef","useState","connect","useParams","styles","SongItem","Time","PlaylistDetail","loadSong","currentSong","id","playlist","setPlaylist","coverRef","loadPlaylistDetails","current","crossOrigin","fac","getColorAsync","then","color","document","getElementById","style","backgroundColor","rgb","catch","err","console","log","playlistId","data","collaborative","description","external_urls","spotify","href","images","height","width","url","name","owner","display_name","type","uri","primary_color","public","snapshot_id","tracks","total","items","added_at","added_by","is_local","track","album","album_type","artists","available_markets","release_date","release_date_precision","total_tracks","disc_number","duration_ms","episode","explicit","external_ids","isrc","popularity","preview_url","track_number","video_thumbnail","limit","next","offset","previous","songClicked","song","Cover","Background","Gradient","Img","Infos","Playlist","Title","Categ","Details","Text_Bold","Text_Light","length","List_Background","List","Heading_Sticky","Heading","Length","map","item","index","mapStateToProps","state","playing","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import FastAverageColor from \"fast-average-color\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport styles from \"./PlaylistDetail.module.scss\";\nimport { SongItem } from \"./SongItem/SongItem\";\nimport { Time } from \"../../assets/Time\";\nimport { Track } from \"../../types/Track\";\nimport { Playlist } from \"../../types/Playlist\";\n\ntype PlaylistDetailProps = {\n  loadSong: (song: Track) => void;\n  currentSong: Track;\n};\n\nconst PlaylistDetail = ({ loadSong, currentSong }: PlaylistDetailProps) => {\n  const { id } = useParams<{ id: string }>();\n  const [playlist, setPlaylist] = useState<Playlist | null>();\n  const coverRef = useRef<HTMLImageElement | null>(null);\n  useEffect(() => {\n    loadPlaylistDetails(id);\n  }, [id]);\n\n  useEffect(() => {\n    if (coverRef.current) {\n      coverRef.current.crossOrigin = \"Anonymous\";\n      const fac = new FastAverageColor();\n      fac\n        .getColorAsync(coverRef.current)\n        .then((color) => {\n          document.getElementById(\"Background\")!.style.backgroundColor =\n            color.rgb;\n          document.getElementById(\"PlaylistBackgorund\")!.style.backgroundColor =\n            color.rgb;\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  }, [playlist]);\n\n  const loadPlaylistDetails =  (playlistId: string) => {\n    let data: Playlist = {\n      collaborative: false,\n      description: 'desc',\n      external_urls: { spotify: 'ext_url' },\n      href: 'href',\n      id: 'id',\n      images: [\n        {\n          height: 512,\n          width: 512,\n          url: 'url',\n        }\n      ],\n      name: 'name',\n      owner: {\n        display_name: 'display_name',\n        external_urls: { spotify: 'string' },\n        href: 'string;',\n        id: 'string',\n        type: 'string',\n        uri: 'string'\n      },\n      primary_color: null,\n      public: null,\n      snapshot_id: 'string',\n      tracks: {\n        href: 'string',\n        total: 1,\n        items: [\n          {\n            added_at: 'asd',\n            added_by: {\n              external_urls: {spotify: 'string'},\n              href: 'string',\n              id: 'string',\n              type: 'string',\n              uri: 'string',\n            },\n            is_local: false,\n            primary_color: null,\n            track: {\n              album: {\n                album_type: 'string',\n                artists: [\n                  {\n                    external_urls: {spotify: 'string'},\n                    href: 'string',\n                    id: 'string',\n                    name: 'string',\n                    type: 'string',\n                    uri: 'string',\n                  }\n                ],\n                available_markets: ['string'],\n                external_urls: {spotify: 'string'},\n                href: 'string',\n                id: 'string',\n                images: [\n                  {\n                    height: 512,\n                    width: 512,\n                    url: 'string',\n                  }\n                ],\n                name: 'string',\n                release_date: 'string',\n                release_date_precision: 'string',\n                total_tracks: 1,\n                type: 'string',\n                uri: 'string',\n              },\n              artists: [\n                {\n                  external_urls: {spotify: 'string'},\n                  href: 'string',\n                  id: 'string',\n                  name: 'string',\n                  type: 'string',\n                  uri: 'string',\n                }\n              ],\n              available_markets: ['',''],\n              disc_number: 1,\n              duration_ms: 240000,\n              episode: false,\n              explicit: true,\n              external_ids: {isrc: 'string'},\n              external_urls: {spotify: 'string'},\n              href: 'string',\n              id: 'string',\n              is_local: false,\n              name: 'string',\n              popularity: 100,\n              preview_url: 'string',\n              track: true,\n              track_number: 1,\n              type: 'string',\n              uri: 'string',\n            },\n            video_thumbnail: {url: 'string'},\n          }\n        ],\n        limit: 10,\n        next: 'string',\n        offset: 2,\n        previous: null,\n      },\n      type: 'string',\n      uri: 'string',\n    }\n    setPlaylist(data);\n  }\n\n  const songClicked = (song: Track) => {\n    if (song.track.preview_url) {\n      loadSong(song);\n    }\n  };\n\n  return (\n    <>\n      {playlist && (\n        <div className={styles.PlaylistDetail}>\n          <div className={styles.Cover}>\n            <div className={styles.Background} id=\"Background\"></div>\n            <div className={styles.Gradient}></div>\n            <div className={styles.Img}>\n              <img\n                src={playlist.images[0].url}\n                alt=\"playlist img\"\n                ref={coverRef}\n              />\n            </div>\n            <div className={styles.Infos}>\n              <div className={styles.Playlist}>PLAYLIST</div>\n              <div className={styles.Title}>\n                <h1>{playlist.name}</h1>\n              </div>\n              <div className={styles.Categ}>{playlist.description}</div>\n              <div className={styles.Details}>\n                <span className={styles.Text_Bold}>\n                  {playlist.owner.display_name}\n                </span>\n                <span className={styles.Text_Light}>\n                  {playlist.tracks.items.length} songs, about 4 hr 20 min\n                </span>\n              </div>\n            </div>\n          </div>\n\n          <div className={styles.List_Background} id=\"PlaylistBackgorund\" />\n          <div className={styles.List}>\n            <div className={styles.Heading_Sticky}>\n              <div className={styles.Heading}>\n                <div>#</div>\n                <div>Title</div>\n                <div>Album</div>\n                <div>Date added</div>\n                <div className={styles.Length}>\n                  <Time />\n                </div>\n              </div>\n            </div>\n\n            {playlist.tracks.items.map((item: Track, index: number) => (\n              <SongItem\n                key={item.track.id}\n                song={item}\n                index={index}\n                current={item.track.id === currentSong?.track.id ? true : false}\n                songClicked={() => songClicked(item)}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: { playing: { song: Track } }) => {\n  return {\n    currentSong: state.playing.song,\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: (loadSong: { type: string; song: Track }) => void\n) => {\n  return {\n    loadSong: (song: Track) => dispatch({ type: \"load\", song }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlaylistDetail);\n"]},"metadata":{},"sourceType":"module"}